package com.trabalho_final;

import java.awt.Color;
import java.awt.Font;
import java.util.Map;
import javax.swing.JOptionPane;

public class ManipulaContaCliente extends javax.swing.JPanel {

    /**
     * Creates new form ManipulaContaCliente
     */
    public ManipulaContaCliente() {
        initComponents();
        setBackground(Color.decode("#cadbb7"));
        atualizarContaComboBox();
        contaLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dropContaCPF = new javax.swing.JComboBox<>();
        sacaBtn = new javax.swing.JButton();
        depositaBtn = new javax.swing.JButton();
        saldoBtn = new javax.swing.JButton();
        remuneraBtn = new javax.swing.JButton();
        contaLabel = new javax.swing.JLabel();
        explicacaoTela = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        clienteText = new javax.swing.JLabel();
        explicacaoTela1 = new javax.swing.JLabel();

        dropContaCPF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dropContaCPF.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                dropContaCPFPopupMenuWillBecomeVisible(evt);
            }
        });
        dropContaCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropContaCPFActionPerformed(evt);
            }
        });

        sacaBtn.setText("Sacar");
        sacaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sacaBtnActionPerformed(evt);
            }
        });

        depositaBtn.setText("Depositar");
        depositaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositaBtnActionPerformed(evt);
            }
        });

        saldoBtn.setText("Ver saldo");
        saldoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saldoBtnActionPerformed(evt);
            }
        });

        remuneraBtn.setText("Remunerar");
        remuneraBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remuneraBtnActionPerformed(evt);
            }
        });

        contaLabel.setText("Conta x - Cliente y");

        explicacaoTela.setText("Escolha uma conta e faça uma operação!");

        explicacaoTela1.setText("Conta:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(explicacaoTela)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depositaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(explicacaoTela1)
                    .addComponent(dropContaCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sacaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(remuneraBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saldoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(clienteText)
                        .addComponent(contaLabel)))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(explicacaoTela)
                .addGap(18, 18, 18)
                .addComponent(explicacaoTela1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dropContaCPF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(sacaBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(39, 39, 39)
                        .addComponent(clienteText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositaBtn)
                    .addComponent(contaLabel))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remuneraBtn)
                    .addComponent(saldoBtn))
                .addGap(44, 44, 44))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void depositaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositaBtnActionPerformed
        depositar();
    }//GEN-LAST:event_depositaBtnActionPerformed

    private void dropContaCPFPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_dropContaCPFPopupMenuWillBecomeVisible
        atualizarContaComboBox();
    }//GEN-LAST:event_dropContaCPFPopupMenuWillBecomeVisible

    private void sacaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sacaBtnActionPerformed
        sacar();
    }//GEN-LAST:event_sacaBtnActionPerformed

    private void saldoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saldoBtnActionPerformed
        verSaldo();
    }//GEN-LAST:event_saldoBtnActionPerformed

    private void remuneraBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remuneraBtnActionPerformed
        remunera();
    }//GEN-LAST:event_remuneraBtnActionPerformed

    private void dropContaCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropContaCPFActionPerformed
        setContaLabel();
    }//GEN-LAST:event_dropContaCPFActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clienteText;
    private javax.swing.JLabel contaLabel;
    private javax.swing.JButton depositaBtn;
    private javax.swing.JComboBox<String> dropContaCPF;
    private javax.swing.JLabel explicacaoTela;
    private javax.swing.JLabel explicacaoTela1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton remuneraBtn;
    private javax.swing.JButton sacaBtn;
    private javax.swing.JButton saldoBtn;
    // End of variables declaration//GEN-END:variables

    private void atualizarContaComboBox() {
        System.out.println("Atualizando ComboBox de clientes...");
        dropContaCPF.removeAllItems();

        for (Map.Entry<String, Cliente> entry : Sistema.hashClientes.entrySet()) {
            Cliente cliente = entry.getValue();
            String cpf = (String) cliente.getCpf();
            if (cliente.getConta() != null) {
                dropContaCPF.addItem(cpf);
            } 
        }
        System.out.println(Sistema.hashClientes.values());
    }

    private void setContaLabel() {
        String contaSelecionada = (String) dropContaCPF.getSelectedItem();
        if (contaSelecionada != null) {
            Cliente cliente = Sistema.hashClientes.get(contaSelecionada);
            if (cliente != null && cliente.getConta() != null) {
                String contaDados = cliente.getConta().getNumero() + ". " + cliente.getNome() + " " + cliente.getSobreNome();
                clienteText.setText("CLIENTE");
                clienteText.setFont(new Font("Poppins", Font.BOLD, 25));
                clienteText.setForeground(Color.decode("485935"));
                contaLabel.setText(contaDados);
                contaLabel.setForeground(Color.decode("485935"));
                contaLabel.setVisible(true);
            }

        }
    }

    private void verSaldo() {
        String clienteSelecionado = (String) dropContaCPF.getSelectedItem();
        if (clienteSelecionado != null) {
            Cliente cliente = Sistema.hashClientes.get(clienteSelecionado);
            JOptionPane.showMessageDialog(this, "Saldo: " + cliente.getConta().getSaldo());

        }
    }

    private void remunera() {
        String clienteSelecionado = (String) dropContaCPF.getSelectedItem();
        if (clienteSelecionado != null) {
            Cliente cliente = Sistema.hashClientes.get(clienteSelecionado);
            cliente.getConta().remunera();
            JOptionPane.showMessageDialog(this, "Conta remunerada ");

        }
    }

    private void depositar() {
        String clienteSelecionado = (String) dropContaCPF.getSelectedItem();
        if (clienteSelecionado != null) {
            Cliente cliente = Sistema.hashClientes.get(clienteSelecionado);

            String input = JOptionPane.showInputDialog(this, "Digite o valor a ser depositado:");

            if (input == null || input.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Operação cancelada ou valor inválido.");
                return;
            }

            try {
                double valorDeposito = Double.parseDouble(input);

                boolean depositoEfetuado = cliente.getConta().deposita(valorDeposito);

                if (depositoEfetuado) {
                    JOptionPane.showMessageDialog(this, "Depósito de R$" + valorDeposito + " realizado com sucesso.");
                } else {
                    JOptionPane.showMessageDialog(this, "O valor do depósito mínimo não foi atingido.");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Valor inválido. Por favor, insira um número válido.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um cliente.");
        }
    }

    private void sacar() {
        String clienteSelecionado = (String) dropContaCPF.getSelectedItem();
        if (clienteSelecionado != null) {
            Cliente cliente = Sistema.hashClientes.get(clienteSelecionado);

            String input = JOptionPane.showInputDialog(this, "Digite o valor a ser sacado:");

            if (input == null || input.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Operação cancelada ou valor inválido.");
                return;
            }

            try {
                double valorSaque = Double.parseDouble(input);

                boolean saqueEfetuado = cliente.getConta().saca(valorSaque);

                if (saqueEfetuado) {
                    JOptionPane.showMessageDialog(this, "Saque de R$" + valorSaque + " realizado com sucesso.");
                } else {
                    JOptionPane.showMessageDialog(this, "Saldo insuficiente para realizar o saque.");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Valor inválido. Por favor, insira um número válido.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um cliente.");
        }
    }

}
