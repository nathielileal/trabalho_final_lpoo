package com.trabalho_final;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.Map;
import javax.swing.JOptionPane;

public class VinculaClienteConta extends javax.swing.JPanel {

    /**
     * Creates new form VinculaClienteConta
     */
    public VinculaClienteConta() {
        initComponents();
        setBackground(Color.decode("#cadbb7"));
        atualizarClientesComboBox();
        atualizarFormulario();
        cpfLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        dropConta = new javax.swing.JComboBox<>();
        dropCliente = new javax.swing.JComboBox<>();
        explicacao = new javax.swing.JLabel();
        depositoInicialInput = new javax.swing.JTextField();
        limiteInput = new javax.swing.JTextField();
        depositoInicial = new javax.swing.JLabel();
        LimiteMontanteMim = new javax.swing.JLabel();
        depositoMim = new javax.swing.JLabel();
        depositoMimInput = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        numContaLabel = new javax.swing.JLabel();
        numConta = new javax.swing.JLabel();
        cpfLabel = new javax.swing.JLabel();
        clienteLabel = new javax.swing.JLabel();
        tipoConta = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dropConta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Conta Corrente", "Conta Investimento" }));
        dropConta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dropContaMouseClicked(evt);
            }
        });
        dropConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropContaActionPerformed(evt);
            }
        });

        dropCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dropCliente.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                dropClientePopupMenuWillBecomeVisible(evt);
            }
        });
        dropCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropClienteActionPerformed(evt);
            }
        });

        explicacao.setText("Escolha um cliente e vincule-o a uma conta!");

        depositoInicialInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositoInicialInputActionPerformed(evt);
            }
        });

        limiteInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limiteInputActionPerformed(evt);
            }
        });

        depositoInicial.setText("Depósito inicial");

        LimiteMontanteMim.setText("Limite (R$)");

        depositoMim.setText("Depósito Minimo");

        jButton1.setText("Criar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        numContaLabel.setText("Número da conta");

        numConta.setText("1");

        cpfLabel.setText("CPF");

        clienteLabel.setText("Cliente:");

        tipoConta.setText("Tipo de conta:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LimiteMontanteMim)
                                    .addComponent(depositoInicial)
                                    .addComponent(depositoMim)
                                    .addComponent(numContaLabel)
                                    .addComponent(cpfLabel))
                                .addGap(181, 181, 181))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dropCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clienteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numConta, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(depositoMimInput, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(limiteInput, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(tipoConta)
                        .addComponent(dropConta, javax.swing.GroupLayout.Alignment.TRAILING, 0, 189, Short.MAX_VALUE)
                        .addComponent(depositoInicialInput, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(explicacao, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(explicacao, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clienteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoConta, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(cpfLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositoInicial)
                    .addComponent(depositoInicialInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LimiteMontanteMim)
                    .addComponent(limiteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositoMim)
                    .addComponent(depositoMimInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numContaLabel)
                    .addComponent(numConta))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dropContaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dropContaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_dropContaMouseClicked

    private void dropContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropContaActionPerformed
        atualizarFormulario();
    }//GEN-LAST:event_dropContaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        criarConta(evt);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void dropClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropClienteActionPerformed
        atualizarCpfLabel();
    }//GEN-LAST:event_dropClienteActionPerformed

    private void depositoInicialInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositoInicialInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depositoInicialInputActionPerformed

    private void limiteInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limiteInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_limiteInputActionPerformed

    private void dropClientePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_dropClientePopupMenuWillBecomeVisible
        atualizarClientesComboBox();
    }//GEN-LAST:event_dropClientePopupMenuWillBecomeVisible

    private void atualizarFormulario() {
        String tipoConta = (String) dropConta.getSelectedItem();
        boolean isContaCorrente = "Conta Corrente".equals(tipoConta);

        depositoInicialInput.setVisible(true);
        depositoInicial.setVisible(true);
        limiteInput.setVisible(isContaCorrente);
        LimiteMontanteMim.setVisible(isContaCorrente);
        depositoMimInput.setVisible(!isContaCorrente);

        depositoInicial.setVisible(!isContaCorrente);
        LimiteMontanteMim.setVisible(!isContaCorrente);
        depositoMim.setVisible(!isContaCorrente);

        numContaLabel.setVisible(false);
        numConta.setVisible(false);

        if (isContaCorrente) {
            depositoInicial.setText("Depósito Inicial (R$)");
            depositoInicial.setVisible(isContaCorrente);
            LimiteMontanteMim.setText("Limite (R$)");
            LimiteMontanteMim.setVisible(isContaCorrente);
            limiteInput.setVisible(true);
        } else {
            LimiteMontanteMim.setText("Montante Mínimo");
            limiteInput.setVisible(true);
            depositoMim.setText("Depósito Mínimo");
            depositoMim.setVisible(true);
        }

        revalidate();
        repaint();
    }

    private void atualizarClientesComboBox() {
        System.out.println("Atualizando ComboBox de clientes...");
        dropCliente.removeAllItems();

        for (Map.Entry<String, Cliente> entry : Sistema.hashClientes.entrySet()) {
            Cliente cliente = entry.getValue();
            String nomeCliente = (String) cliente.getCpf() + " - " + cliente.getNome() + " " + cliente.getSobreNome();

            dropCliente.addItem(nomeCliente);
        }
        System.out.println(Sistema.hashClientes.values());
    }

    private void atualizarCpfLabel() {
        String itemSelecionado = (String) dropCliente.getSelectedItem();
        if (itemSelecionado != null) {
            String[] partes = itemSelecionado.split(" - ");
            if (partes.length > 0) {
                String cpf = partes[0];
                Cliente cliente = Sistema.hashClientes.get(cpf);
                if (cliente != null) {
                    cpfLabel.setText(cliente.getCpf());
                }
            }
        }
    }

    private void criarConta(ActionEvent evt) {
        String nomeSelecionado = (String) dropCliente.getSelectedItem();
        if (nomeSelecionado == null) {
            JOptionPane.showMessageDialog(this, "Selecione um cliente.");
            return;
        }

        String[] partes = nomeSelecionado.split(" - ");
        if (partes.length == 0) {
            JOptionPane.showMessageDialog(this, "Cliente não encontrado.");
            return;
        }

        String cpf = partes[0];
        Cliente cliente = Sistema.hashClientes.get(cpf);
        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Cliente não encontrado.");
            return;
        }

        if (cliente.getConta() != null) {
            JOptionPane.showMessageDialog(this, "Cliente já possui uma conta.");
            return;
        }
        
        String tipoConta = (String) dropConta.getSelectedItem();

        try {
            if ("Conta Corrente".equals(tipoConta)) {
                double depositoInicial = Double.parseDouble(depositoInicialInput.getText());
                double limite = Double.parseDouble(limiteInput.getText());
                ContaCorrente contaCorrente = new ContaCorrente(cliente, depositoInicial, limite);
                cliente.setConta(contaCorrente);
            } else if ("Conta Investimento".equals(tipoConta)) {
                double montanteMinimo = Double.parseDouble(limiteInput.getText());
                double depositoMinimo = Double.parseDouble(depositoMimInput.getText());
                double depositoInicial = Double.parseDouble(depositoInicialInput.getText());
                if (depositoInicial < montanteMinimo || depositoInicial < depositoMinimo) {
                    JOptionPane.showMessageDialog(this, "Depósito inicial inválido. Deve ser maior que o montante mínimo e o depósito mínimo.");
                    return;
                }
                ContaInvestimento contaInvestimento = new ContaInvestimento(cliente, depositoInicial, montanteMinimo, depositoMinimo);
                cliente.setConta(contaInvestimento);
            }

            JOptionPane.showMessageDialog(this, "Conta vinculada com sucesso ao cliente " + cliente.getNome() + ".");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, insira valores válidos.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LimiteMontanteMim;
    private javax.swing.JLabel clienteLabel;
    private javax.swing.JLabel cpfLabel;
    private javax.swing.JLabel depositoInicial;
    private javax.swing.JTextField depositoInicialInput;
    private javax.swing.JLabel depositoMim;
    private javax.swing.JTextField depositoMimInput;
    private javax.swing.JComboBox<String> dropCliente;
    private javax.swing.JComboBox<String> dropConta;
    private javax.swing.JLabel explicacao;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JTextField limiteInput;
    private javax.swing.JLabel numConta;
    private javax.swing.JLabel numContaLabel;
    private javax.swing.JLabel tipoConta;
    // End of variables declaration//GEN-END:variables

}
