package com.trabalho_lpoo.view;

import com.trabalho_lpoo.controller.VincularContaController;
import com.trabalho_lpoo.model.Cliente;
import com.trabalho_lpoo.dao.ClienteDao;
import com.trabalho_lpoo.dao.ClienteDaoSql;
import com.trabalho_lpoo.dao.ConnectionFactory;
import com.trabalho_lpoo.dao.ContaDaoSql;
import com.trabalho_lpoo.dao.DaoFactory;
import com.trabalho_lpoo.dao.DaoType;
import com.trabalho_lpoo.model.ContaCorrente;
import com.trabalho_lpoo.model.ContaInvestimento;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;

public class VincularContaView extends javax.swing.JPanel {

    /**
     * Creates new form VincularContaView
     */
    public VincularContaView() {
        initComponents();
        atualizarFormulario();
//        cpfLabel.setVisible(false);
    }

    public void setController(VincularContaController controller) {

//        this.botaoCriar.addActionListener(e -> controller.cadastrarCliente());
//        this.botaoAtualizar.addActionListener(e -> controller.alterarCliente());
//        this.botaoExcluir.addActionListener(e -> controller.excluirCliente());
//        this.botaoListar.addActionListener(e -> controller.listarCliente());
    }

    public void initView() {
        /* Create and display the form */
//        tabelaClienteView.setJanelaView(this);
//        java.awt.EventQueue.invokeLater(() -> this.setVisible(true));
        java.awt.EventQueue.invokeLater(() -> {
            javax.swing.JFrame frame = new javax.swing.JFrame("Vincular Conta");
            frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
            frame.add(this); // Adiciona o JPanel ao JFrame
            frame.setSize(400, 300); // Define o tamanho da janela
            frame.setVisible(true); // Exibe a janela
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        clienteComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        tipoComboBox = new javax.swing.JComboBox<>();
        depositoInicialText = new javax.swing.JLabel();
        depositoInicialTextField = new javax.swing.JTextField();
        limiteText = new javax.swing.JLabel();
        limiteTextField = new javax.swing.JTextField();
        depositoMinText = new javax.swing.JLabel();
        depositoMinTextField = new javax.swing.JTextField();
        numContaText = new javax.swing.JLabel();
        numero = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnCriarConta = new javax.swing.JButton();

        jLabel1.setText("Cliente:");

        clienteComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        clienteComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                clienteComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });

        jLabel2.setText("Tipo de conta:");

        tipoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Conta corrente", "Conta investimento"}));
        tipoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoComboBoxActionPerformed(evt);
            }
        });

        depositoInicialText.setText("Depósito inicial (R$):");

        depositoInicialTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositoInicialTextFieldActionPerformed(evt);
            }
        });

        limiteText.setText("Limite (R$): ");

        limiteTextField.setActionCommand("<Not Set>");
        limiteTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        limiteTextField.setDragEnabled(true);

        depositoMinText.setText("Depósito mínimo (R$):");

        numContaText.setText("Número da conta:");

        numero.setText("1");

        jLabel3.setText("Vincular conta");

        btnCriarConta.setText("Criar");
        btnCriarConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarContaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depositoInicialText)
                    .addComponent(limiteText)
                    .addComponent(clienteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(depositoMinText)
                    .addComponent(numContaText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(numero)
                        .addGap(116, 116, 116))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(74, 74, 74))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tipoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(depositoInicialTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(limiteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(depositoMinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(26, 26, 26)))))
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCriarConta)
                    .addComponent(jLabel3))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clienteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositoInicialText)
                    .addComponent(depositoInicialTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limiteText)
                    .addComponent(limiteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositoMinText)
                    .addComponent(depositoMinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numContaText)
                    .addComponent(numero))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCriarConta)
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void depositoInicialTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositoInicialTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depositoInicialTextFieldActionPerformed

    private void clienteComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_clienteComboBoxPopupMenuWillBecomeVisible
        atualizarClienteComboBox();
    }//GEN-LAST:event_clienteComboBoxPopupMenuWillBecomeVisible

    private void tipoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoComboBoxActionPerformed
        atualizarFormulario();
    }//GEN-LAST:event_tipoComboBoxActionPerformed

    private void btnCriarContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarContaActionPerformed
        criarConta(evt);
    }//GEN-LAST:event_btnCriarContaActionPerformed

    private void atualizarFormulario() {
        String tipoConta = (String) tipoComboBox.getSelectedItem();
        boolean isContaCorrente = "Conta corrente".equals(tipoConta);

        depositoInicialTextField.setVisible(true);
        depositoInicialText.setVisible(true);
        limiteTextField.setVisible(isContaCorrente);
        limiteText.setVisible(isContaCorrente);
        depositoMinTextField.setVisible(!isContaCorrente);

        depositoInicialText.setVisible(!isContaCorrente);
        limiteText.setVisible(!isContaCorrente);
        depositoMinText.setVisible(!isContaCorrente);

        numContaText.setVisible(false);
        numero.setVisible(false);

        if (isContaCorrente) {
            depositoInicialText.setText("Depósito Inicial (R$)");
            depositoInicialText.setVisible(isContaCorrente);
            limiteText.setText("Limite (R$)");
            limiteText.setVisible(isContaCorrente);
            limiteTextField.setVisible(true);
        } else {
            limiteText.setText("Montante Mínimo");
            limiteTextField.setVisible(true);
            depositoMinText.setText("Depósito Mínimo");
            depositoMinText.setVisible(true);
        }

        revalidate();
        repaint();
    }

    private void atualizarClienteComboBox() {
        try {
            ClienteDaoSql model = new ClienteDaoSql();

            List<Cliente> clientes = model.getAll();

            clienteComboBox.removeAllItems();

            for (Cliente cliente : clientes) {
                clienteComboBox.addItem(cliente.getCpf() + " - " + cliente.getNome() + " " + cliente.getSobreNome());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar clientes: " + e.getMessage());
        }
    }

    private void criarConta(ActionEvent evt) {
        try {
            String nomeSelecionado = (String) clienteComboBox.getSelectedItem();

            if (nomeSelecionado == null) {
                JOptionPane.showMessageDialog(this, "Selecione um cliente.");
                return;
            }

            String[] partes = nomeSelecionado.split(" - ");
            String cpf = partes[0];

            ClienteDaoSql modelCliente = new ClienteDaoSql();

            Cliente cliente = modelCliente.getClienteByCpf(cpf);

            if (cliente == null) {
                JOptionPane.showMessageDialog(this, "Cliente não encontrado.");
                return;
            }
            
            ContaDaoSql modelConta = new ContaDaoSql();

            String tipoConta = (String) tipoComboBox.getSelectedItem();
            long numeroConta;

            if ("Conta corrente".equals(tipoConta)) {
                double depositoInicial = Double.parseDouble(depositoInicialTextField.getText());
                double limite = Double.parseDouble(limiteTextField.getText());

                ContaCorrente contaCorrente = new ContaCorrente(cliente.getId(), depositoInicial, limite);

                numeroConta = modelConta.criarConta(contaCorrente);

                contaCorrente.setNumero(numeroConta);

                modelConta.criarContaCorrente(contaCorrente);
            } else if ("Conta investimento".equals(tipoConta)) {
                double montanteMinimo = Double.parseDouble(limiteTextField.getText());
                double depositoMinimo = Double.parseDouble(depositoMinTextField.getText());
                double depositoInicial = Double.parseDouble(depositoInicialTextField.getText());

                ContaInvestimento contaInvestimento = new ContaInvestimento(cliente.getId(), depositoInicial, montanteMinimo, depositoMinimo);

                numeroConta = modelConta.criarConta(contaInvestimento);

                contaInvestimento.setNumero(numeroConta);

                modelConta.criarContaInvestimento(contaInvestimento);
            }

            JOptionPane.showMessageDialog(this, "Conta criada com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao criar conta: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCriarConta;
    private javax.swing.JComboBox<String> clienteComboBox;
    private javax.swing.JLabel depositoInicialText;
    private javax.swing.JTextField depositoInicialTextField;
    private javax.swing.JLabel depositoMinText;
    private javax.swing.JTextField depositoMinTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel limiteText;
    private javax.swing.JTextField limiteTextField;
    private javax.swing.JLabel numContaText;
    private javax.swing.JLabel numero;
    private javax.swing.JComboBox<String> tipoComboBox;
    // End of variables declaration//GEN-END:variables
}
