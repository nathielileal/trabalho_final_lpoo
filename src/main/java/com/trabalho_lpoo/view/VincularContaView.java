package com.trabalho_lpoo.view;

import com.trabalho_lpoo.controller.VincularContaController;
import com.trabalho_lpoo.model.Cliente;
import com.trabalho_lpoo.dao.ClienteDaoSql;
import com.trabalho_lpoo.dao.ContaDaoSql;
import com.trabalho_lpoo.model.ContaCorrente;
import com.trabalho_lpoo.model.ContaInvestimento;
import java.util.List;
import javax.swing.JOptionPane;

public class VincularContaView extends javax.swing.JPanel {

    /**
     * Creates new form VincularContaView
     */
    public VincularContaView() {
        initComponents();
        atualizarFormulario();
    }

    public void setController(VincularContaController controller) {
    }

    public void initView() {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            javax.swing.JFrame frame = new javax.swing.JFrame("Vincular Conta");
            frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
            frame.add(this); 
            frame.setSize(400, 300); 
            frame.setVisible(true); 
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        clienteComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        tipoComboBox = new javax.swing.JComboBox<>();
        depositoInicialText = new javax.swing.JLabel();
        depositoInicialTextField = new javax.swing.JTextField();
        limiteText = new javax.swing.JLabel();
        limiteTextField = new javax.swing.JTextField();
        depositoMinText = new javax.swing.JLabel();
        depositoMinTextField = new javax.swing.JTextField();
        numContaText = new javax.swing.JLabel();
        numero = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnCriarConta = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Cliente:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 26, 0, 0);
        add(jLabel1, gridBagConstraints);

        clienteComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        clienteComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                clienteComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 81;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 26, 0, 0);
        add(clienteComboBox, gridBagConstraints);

        jLabel2.setText("Tipo de conta:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 2, 0, 0);
        add(jLabel2, gridBagConstraints);

        tipoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Conta corrente", "Conta investimento"}));
        tipoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 56;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 13, 0, 26);
        add(tipoComboBox, gridBagConstraints);

        depositoInicialText.setText("Depósito inicial (R$):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 26, 0, 0);
        add(depositoInicialText, gridBagConstraints);

        depositoInicialTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositoInicialTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(23, 13, 0, 26);
        add(depositoInicialTextField, gridBagConstraints);

        limiteText.setText("Limite (R$): ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 26, 0, 0);
        add(limiteText, gridBagConstraints);

        limiteTextField.setActionCommand("<Not Set>");
        limiteTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        limiteTextField.setDragEnabled(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 13, 0, 26);
        add(limiteTextField, gridBagConstraints);

        depositoMinText.setText("Depósito mínimo (R$):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 26, 0, 0);
        add(depositoMinText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 13, 0, 26);
        add(depositoMinTextField, gridBagConstraints);

        numContaText.setText("Número da conta:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 26, 0, 0);
        add(numContaText, gridBagConstraints);

        numero.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 13, 0, 0);
        add(numero, gridBagConstraints);

        jLabel3.setText("Vincular conta");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 9, 0, 0);
        add(jLabel3, gridBagConstraints);

        btnCriarConta.setText("Criar");
        btnCriarConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarContaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 8, 17, 0);
        add(btnCriarConta, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void depositoInicialTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositoInicialTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depositoInicialTextFieldActionPerformed

    private void clienteComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_clienteComboBoxPopupMenuWillBecomeVisible
        atualizarClienteComboBox();
    }//GEN-LAST:event_clienteComboBoxPopupMenuWillBecomeVisible

    private void tipoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoComboBoxActionPerformed
        atualizarFormulario();
    }//GEN-LAST:event_tipoComboBoxActionPerformed

    private void btnCriarContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarContaActionPerformed
        criarConta();
    }//GEN-LAST:event_btnCriarContaActionPerformed

    private void atualizarFormulario() {
        String tipoConta = (String) tipoComboBox.getSelectedItem();
        boolean isContaCorrente = "Conta corrente".equals(tipoConta);

        depositoInicialTextField.setVisible(true);
        depositoInicialText.setVisible(true);
        limiteTextField.setVisible(isContaCorrente);
        limiteText.setVisible(isContaCorrente);
        depositoMinTextField.setVisible(!isContaCorrente);

        depositoInicialText.setVisible(!isContaCorrente);
        limiteText.setVisible(!isContaCorrente);
        depositoMinText.setVisible(!isContaCorrente);

        numContaText.setVisible(false);
        numero.setVisible(false);

        if (isContaCorrente) {
            depositoInicialText.setText("Depósito Inicial (R$)");
            depositoInicialText.setVisible(isContaCorrente);
            limiteText.setText("Limite (R$)");
            limiteText.setVisible(isContaCorrente);
            limiteTextField.setVisible(true);
        } else {
            limiteText.setText("Montante Mínimo");
            limiteTextField.setVisible(true);
            depositoMinText.setText("Depósito Mínimo");
            depositoMinText.setVisible(true);
        }

        revalidate();
        repaint();
    }

    private void atualizarClienteComboBox() {
        try {
            ClienteDaoSql model = new ClienteDaoSql();

            List<Cliente> clientes = model.getAll();

            clienteComboBox.removeAllItems();

            for (Cliente cliente : clientes) {
                clienteComboBox.addItem(cliente.getCpf() + " - " + cliente.getNome() + " " + cliente.getSobreNome());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar clientes: " + e.getMessage());
        }
    }

    private void criarConta() {
        try {
            String nomeSelecionado = (String) clienteComboBox.getSelectedItem();

            if (nomeSelecionado == null) {
                JOptionPane.showMessageDialog(this, "Selecione um cliente.");
                return;
            }

            String[] partes = nomeSelecionado.split(" - ");
            String cpf = partes[0];

            ClienteDaoSql modelCliente = new ClienteDaoSql();

            Cliente cliente = modelCliente.getClienteByCpf(cpf);

            if (cliente == null) {
                JOptionPane.showMessageDialog(this, "Cliente não encontrado.");
                return;
            }
            
            ContaDaoSql modelConta = new ContaDaoSql();

            String tipoConta = (String) tipoComboBox.getSelectedItem();
            long numeroConta;

            if ("Conta corrente".equals(tipoConta)) {
                double depositoInicial = Double.parseDouble(depositoInicialTextField.getText());
                double limite = Double.parseDouble(limiteTextField.getText());

                ContaCorrente contaCorrente = new ContaCorrente(cliente.getId(), depositoInicial, limite);

                numeroConta = modelConta.criarConta(contaCorrente);

                contaCorrente.setNumero(numeroConta);

                modelConta.criarContaCorrente(contaCorrente);
            } else if ("Conta investimento".equals(tipoConta)) {
                double montanteMinimo = Double.parseDouble(limiteTextField.getText());
                double depositoMinimo = Double.parseDouble(depositoMinTextField.getText());
                double depositoInicial = Double.parseDouble(depositoInicialTextField.getText());

                ContaInvestimento contaInvestimento = new ContaInvestimento(cliente.getId(), depositoInicial, montanteMinimo, depositoMinimo);

                numeroConta = modelConta.criarConta(contaInvestimento);

                contaInvestimento.setNumero(numeroConta);

                modelConta.criarContaInvestimento(contaInvestimento);
            }

            JOptionPane.showMessageDialog(this, "Conta criada com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao criar conta: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCriarConta;
    private javax.swing.JComboBox<String> clienteComboBox;
    private javax.swing.JLabel depositoInicialText;
    private javax.swing.JTextField depositoInicialTextField;
    private javax.swing.JLabel depositoMinText;
    private javax.swing.JTextField depositoMinTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel limiteText;
    private javax.swing.JTextField limiteTextField;
    private javax.swing.JLabel numContaText;
    private javax.swing.JLabel numero;
    private javax.swing.JComboBox<String> tipoComboBox;
    // End of variables declaration//GEN-END:variables
}
