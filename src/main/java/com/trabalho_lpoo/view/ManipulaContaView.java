package com.trabalho_lpoo.view;

import com.trabalho_lpoo.controller.ManipulaContaController;
import com.trabalho_lpoo.dao.ContaDaoSql;
import java.awt.Font;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;

public class ManipulaContaView extends javax.swing.JFrame {

    /**
     * Creates new form ManipulaCOntaView
     */
    public ManipulaContaView() {
        initComponents();
        atualizarClienteComboBox();

        clienteTitulo.setVisible(false);
        clienteText.setVisible(false);
    }

    public void setController(ManipulaContaController controller) {
    }

    public void initView() {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            setVisible(true);
            setSize(400, 300);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButton1 = new javax.swing.JButton();
        contaText = new javax.swing.JLabel();
        contaComboBox = new javax.swing.JComboBox<>();
        btnSacar = new javax.swing.JButton();
        btnDepositar = new javax.swing.JButton();
        btnRemunerar = new javax.swing.JButton();
        btnSaldo = new javax.swing.JButton();
        clienteTitulo = new javax.swing.JLabel();
        clienteText = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        contaText.setText("Conta:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(35, 57, 0, 0);
        getContentPane().add(contaText, gridBagConstraints);

        contaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        contaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contaComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 169;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 27, 0, 31);
        getContentPane().add(contaComboBox, gridBagConstraints);

        btnSacar.setText("Sacar");
        btnSacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 33, 0, 0);
        getContentPane().add(btnSacar, gridBagConstraints);

        btnDepositar.setText("Depositar");
        btnDepositar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 33, 0, 0);
        getContentPane().add(btnDepositar, gridBagConstraints);

        btnRemunerar.setText("Remunerar");
        btnRemunerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemunerarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 33, 51, 0);
        getContentPane().add(btnRemunerar, gridBagConstraints);

        btnSaldo.setText("Ver saldo");
        btnSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaldoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 33, 0, 0);
        getContentPane().add(btnSaldo, gridBagConstraints);

        clienteTitulo.setText("CLIENTE:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 63, 0, 0);
        getContentPane().add(clienteTitulo, gridBagConstraints);

        clienteText.setText("cliente");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 146;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 63, 0, 31);
        getContentPane().add(clienteText, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacarActionPerformed
        try {
            sacar();
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_btnSacarActionPerformed

    private void btnSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaldoActionPerformed
        try {
            verSaldo();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnSaldoActionPerformed

    private void contaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contaComboBoxActionPerformed
        setContaLabel();
    }//GEN-LAST:event_contaComboBoxActionPerformed

    private void btnRemunerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemunerarActionPerformed
        try {
            remunera();
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_btnRemunerarActionPerformed

    private void btnDepositarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepositarActionPerformed
        try {
            depositar();
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_btnDepositarActionPerformed

    private void atualizarClienteComboBox() {
        try {
            ContaDaoSql model = new ContaDaoSql();

            List<String> cpf = model.getCpf();

            contaComboBox.removeAllItems();

            for (String c : cpf) {
                contaComboBox.addItem(c);
            }

            contaComboBox.setSelectedIndex(-1);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar contas: " + e.getMessage());
        }
    }

    private void setContaLabel() {
        String cpfSelecionado = (String) contaComboBox.getSelectedItem();

        if (cpfSelecionado != null) {
            try {
                ContaDaoSql model = new ContaDaoSql();

                String[] clienteData = model.getClienteByCpf(cpfSelecionado);

                clienteText.setText("");
                clienteTitulo.setVisible(false);

                if (clienteData != null) {
                    String numero = clienteData[0];
                    String nome = clienteData[1];
                    String sobrenome = clienteData[2];
                    String tipo = clienteData[3];

                    clienteText.setText(numero + ". " + nome + " " + sobrenome + " - " + tipo);
                    clienteText.setFont(new Font("Poppins", Font.BOLD, 10));
                    clienteText.setVisible(true);
                    clienteTitulo.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Nenhuma conta encontrada para o CPF selecionado.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao buscar dados do cliente e da conta: " + e.getMessage());
            }
        }
    }

    private void verSaldo() throws Exception {
        String cpfSelecionado = (String) contaComboBox.getSelectedItem();

        if (cpfSelecionado != null) {
            try {
                ContaDaoSql model = new ContaDaoSql();

                String[] clienteData = model.getClienteByCpf(cpfSelecionado);

                long numeroConta = Long.parseLong(clienteData[0]);

                double saldo = model.getSaldo(numeroConta);
                JOptionPane.showMessageDialog(this, "Saldo atual: R$ " + saldo);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao buscar saldo: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um cliente.");
        }
    }

    private void remunera() throws IOException {
        String cpfSelecionado = (String) contaComboBox.getSelectedItem();

        if (cpfSelecionado != null) {
            try {
                ContaDaoSql model = new ContaDaoSql();

                double saldoAtualizado = model.remunerar(cpfSelecionado);

                if (saldoAtualizado != -1) {
                    JOptionPane.showMessageDialog(this, "Saldo remunerado! Novo saldo: R$ " + saldoAtualizado);
                } else {
                    JOptionPane.showMessageDialog(this, "Conta não encontrada para o CPF selecionado.");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao remunerar saldo: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um cliente.");
        }
    }

    private void depositar() throws IOException {
        String cpfSelecionado = (String) contaComboBox.getSelectedItem();

        if (cpfSelecionado != null) {
            String input = JOptionPane.showInputDialog(this, "Digite o valor a ser depositado:");

            if (input == null || input.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Operação cancelada ou valor inválido.");
                return;
            }

            try {
                double valorDeposito = Double.parseDouble(input);

                if (valorDeposito <= 0) {
                    JOptionPane.showMessageDialog(this, "Valor inválido. Digite um valor maior que zero.");
                    return;
                }

                ContaDaoSql model = new ContaDaoSql();

                double saldoAtualizado = model.depositar(cpfSelecionado, valorDeposito);

                if (saldoAtualizado != -1) {
                    JOptionPane.showMessageDialog(this, "Depósito de R$ " + valorDeposito + " realizado com sucesso. Novo saldo: R$ " + saldoAtualizado);
                } else {
                    JOptionPane.showMessageDialog(this, "Conta não encontrada para o CPF selecionado.");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Valor inválido. Por favor, insira um número válido.");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao realizar depósito: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um cliente.");
        }
    }

    private void sacar() throws IOException {
        String cpfSelecionado = (String) contaComboBox.getSelectedItem();

        if (cpfSelecionado != null) {
            String input = JOptionPane.showInputDialog(this, "Digite o valor a ser sacado:");

            if (input == null || input.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Operação cancelada ou valor inválido.");
                return;
            }

            try {
                double valorSaque = Double.parseDouble(input);

                if (valorSaque <= 0) {
                    JOptionPane.showMessageDialog(this, "Valor inválido. Digite um valor maior que zero.");
                    return;
                }

                ContaDaoSql model = new ContaDaoSql();

                double saldoAtualizado = model.sacarValor(cpfSelecionado, valorSaque);

                if (saldoAtualizado != -1) {
                    JOptionPane.showMessageDialog(this, "Saque de R$ " + valorSaque + " realizado com sucesso. Novo saldo: R$ " + saldoAtualizado);
                } else {
                    JOptionPane.showMessageDialog(this, "Conta não encontrada ou saldo insuficiente.");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Valor inválido. Por favor, insira um número válido.");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao realizar saque: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um cliente.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDepositar;
    private javax.swing.JButton btnRemunerar;
    private javax.swing.JButton btnSacar;
    private javax.swing.JButton btnSaldo;
    private javax.swing.JLabel clienteText;
    private javax.swing.JLabel clienteTitulo;
    private javax.swing.JComboBox<String> contaComboBox;
    private javax.swing.JLabel contaText;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
